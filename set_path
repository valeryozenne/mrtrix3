#!/usr/bin/python3

# Copyright (c) 2008-2021 the MRtrix3 contributors.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Covered Software is provided under this License on an "as is"
# basis, without warranty of any kind, either expressed, implied, or
# statutory, including, without limitation, warranties that the
# Covered Software is free of defects, merchantable, fit for a
# particular purpose or non-infringing.
# See the Mozilla Public License v. 2.0 for more details.
#
# For more details, see http://www.mrtrix.org/.

# automatically set the PATH environment variable to include the MRtrix3
# executables and scripts. This script must be run after a successful build,
# from the MRtrix3 toplevel folder:
#
#   ./set_path
#
# By default, the script will add the relevant 'export PATH' directive to the
# relevant BASH rc file: ~/.bashrc (~/.bash_profile on MacOSX). If this in not
# appropriate, it is possible to specify the file to be modified as the
# argument, e.g.:
#
#   ./set_path ~/.profile
#
# Note that this works only for Bourne shell and derivatives (BASH in
# particular). This will not work for the C shell and derivatives.


import sys, os, platform, subprocess, shutil, fileinput

# on Windows, need to use MSYS2 version of python - not MinGW version:
if sys.executable[0].isalpha() and sys.executable[1] == ':':
  python_cmd = subprocess.check_output ([ 'cygpath.exe', '-w', '/usr/bin/python3' ]).decode(errors='ignore').splitlines()[0].strip()
  sys.exit (subprocess.call ([ python_cmd ] + sys.argv))

# check whether we are in the right location:
label = ""
script_dir = os.path.dirname (os.path.abspath(__file__))
if not os.path.samefile (os.getcwd(), script_dir):
  label = '"' + os.path.basename(os.getcwd()) + '" module '

bin_dir = os.path.join(os.getcwd(), 'bin')
if not os.path.isdir (bin_dir):
    print ('''
ERROR: no bin/ folder found in expected location!

This script needs to be run from the MRtrix3 toplevel folder (or an MRtrix3
module's toplevel folder).
''')
    sys.exit (1)


# set default destination file based on OS:
filename = os.path.expanduser('~')
sysname = platform.system().lower()
if sysname == 'darwin':
  app_dir = os.path.join(filename, 'Applications')
  if os.getenv('SHELL') == '/bin/zsh':
    filename = os.path.join(filename, '.zprofile')
  else:
    filename = os.path.join(filename, '.bash_profile')
else:
  filename = os.path.join(filename, '.bashrc')

# check for the -remove flag:
remove = False
if '-remove' in sys.argv[1:]:
  remove = True
  sys.argv.remove ('-remove')

if sysname == 'darwin':
  for app in ['MRView.app','SHView.app']:
    removed_link = False
    target = os.path.join(bin_dir,app)
    if not os.path.exists(app_dir):
      os.mkdir(app_dir)
    destination = os.path.join(app_dir,app)
    if os.path.exists(destination):
      if os.path.islink(destination):
        if remove:
          print ('Symbolic link "''' + destination + '" successfully removed')
        removed_link = True
        os.remove(destination)
      else:
        print('ERROR:',app_dir,'already contains', app, 'that is not a symlink')
        sys.exit(1)
    if not remove:
      if os.path.isdir(target):
        os.symlink(target,destination,target_is_directory=True)
        if removed_link:
          print ('Symbolic link "''' + destination + '" successfully updated')
        else:
          print ('Symbolic link "''' + destination + '" successfully created')

if sysname == 'linux':
  if remove or os.path.exists(os.path.join(bin_dir,'mrview')):
    xdg_action = 'install'
    if remove:
      xdg_action = 'uninstall'
    try:
      for s in ['16', '32', '48', '64', '128']:
        for t in ['mrtrix', 'mrtrix-gz', 'nifti', 'nifti-gz', 'mgh', 'mgz', 'analyze']:
          subprocess.call(['xdg-icon-resource', xdg_action, '--context', 'apps', '--size', s, 'icons/desktop/' + s + 'x' + s + '/mrtrix.png', 'application-x-' + t])
      print('xdg icon resources ' + xdg_action + 'ed')
      subprocess.call(['xdg-mime', xdg_action, 'mrtrix-mime.xml'])
      print('xdg mime info ' + xdg_action + 'ed')
      shutil.copy('mrtrix-mrview.desktop','tmp/mrtrix-mrview.desktop')
      for line in fileinput.input('tmp/mrtrix-mrview.desktop', inplace=True):
        print(line.replace('mrview', bin_dir + '/mrview').rstrip('\n'))
      subprocess.call(['xdg-desktop-menu', xdg_action, 'tmp/mrtrix-mrview.desktop'])
      print('xdg desktop menu ' + xdg_action + 'ed')
    except FileNotFoundError:
      print ('xdg tools not available')

# check whether destination file has been specified explicitly:
if len(sys.argv) > 2:
  print ('''
ERROR: usage is:

  ./set_path [-remove] [rc_path]

Where:

  rc_path    [optional] allows the user to specify the startup file to be
             modified (e.g. './set_path ~/.bash_profile').

  -remove    [optional] indicates that the path should be removed from the
             startup file
''')
  sys.exit (1)

if len(sys.argv) == 2:
  filename = sys.argv[1]


# what will be written to file:
comment='# MRtrix3 ' + label + 'PATH automatically generated by set_path script - do NOT modify:\n'
set_path = 'export PATH="' + bin_dir + os.pathsep + '$PATH"\n'



is_next_line = False
append_path = True
output = ''

if os.path.isfile (filename):
  with open (filename, 'r') as f:
    for line in f:
      if is_next_line is True:
        if not line.startswith ('export PATH='):
          print ('''
ERROR: File appears to have been modified by this script previously, but the
contents do not match the expected format.

You will need to manually edit the relevant file "''' + filename + '''" in
one of two ways:

1. Amend the existing file contents, so that PATH is correctly updated to
   include MRtrix3 binaries and scripts.

2. Remove the text that was previously added to the file by this script, and
   then run the set_path script again. The offending text is the following line
   AND the one immediately after it:
   ''' + comment + '''
''')
          sys.exit (1)

        if not remove:
          if line == set_path:
            print ('File "' + filename + '" is already up to date')
            sys.exit (0)
          output += set_path

        is_next_line = False
        append_path = False
        continue

      if line == comment:
        is_next_line = True
        if remove:
          continue

      output += line

if not remove:
  # comment was the last line:
  if is_next_line is True:
    output += set_path
  # if previous modification not detected:
  elif append_path is True:
    output += '\n' + comment + set_path

with open (filename, 'w') as f:
  f.write (output)
print ('File "''' + filename + '" successfully updated')
print ('(Close terminal and open a new one for change to take effect)')
